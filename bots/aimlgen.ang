require "xmlgen.ang" drop
require "util.ang" drop

# import with shuffling - I don't like how xmlgen works :)

:mktag |cons,attrs,name:|
    ?name ?attrs ?cons xmlgen$mktag;

# simple tag with no attrs
:stag |con,name:| ?con [%] ?name mktag;

:aiml [%`version "2.0" ] `aiml mktag;

:br none `br stag;
:deb `debug stag;
:sr `srai stag;
:think `think stag;
:star none `star stag;
:starn |n:| none [% `index ?n] `star mktag;
:upper `uppercase stag;
:lower `lowercase stag;

:cat |template,pattern:|
    [
     ?pattern `pattern stag,
     ?template `template stag
     ]
    `category
    stag
;


################################################## category mods (postfix fluent)

:that |cat,string:| :"(cat string -- cat) adds a that"
    ?string `that stag
    ?cat?`contents push ?cat;

################################################## template aids

:random |list:|
    ?list (`li stag) map
    `random stag
;

:clean [%`opts "s"] `clean mktag;

# category with template wrapped in <clean opt="s">
:cleancat |t,p:| ?t [%`opts "s"] `clean mktag ?p cat;


# set and get
:s |v,name:| ?v [%`name ?name] `set mktag;
:g |name:| none [%`name ?name] `get mktag;

# does map exist for this bot?
:hassbmap |map:| none [%`map ?map] `hassbmap mktag;

# does set exist for this bot?
:hassbset |set:| none [%`set ?set] `hassbset mktag;

# is in private set for this bot
:insbset |v,set:| ?v [%`set ?set] `insbset mktag;

# get from private set randomly
:randsbset |set:| none [%`set ?set] `randsbset mktag;

# get from private map
:getsb |name,map:| none [%`map ?map, `name ?name] `getsb mktag;
:getdefsb `default getsb;

# player predicate set/get
:setpl |v,name:| ?v [%`name ?name] `setpl mktag;
:getpl |name:| none [%`name ?name] `getpl mktag;

# conditions - this one requires a list of li tags, and takes the name of a predicate (set with "s")
:cond |tags,name:| ?tags [%`name ?name ] `condition mktag;
# this condition checks against a "player predicate", set with "setpl" on a per-player basis.
:condpl |tags,name:| ?tags [%`pname ?name ] `condition mktag;

#default <LI> tag with no condition
:lidef |v:| ?v `li stag;
#<LI VALUE=..>
:lival |v,test:| ?v [%`value ?test] `li mktag;

# <LI VALUE_FROM_NAME=..> (test against predicate value
:lipred |v,test:| ?v [%`value_from_name ?test] `li mktag;
# LI with min,max or range
:limin |v,mn:| ?v [%`min ?mn] `li mktag;
:limax |v,mx:| ?v [%`max ?mx] `li mktag;
:lirng |v,mn,mx:| ?v [%`min ?mn, `max ?mx] `li mktag;

:topic |catlist,name:| ?catlist [%`name ?name] `topic mktag;
:settopic `topic setpl think;
:clrtopic none [%`name `topic ] `setpl mktag;


# conditions - this is a shorthand for <li value=> tags
:switch |hash,name:|
    []
    ?hash each {
        i `default = if
            ival `li stag
        else
            ival i lival
        then,
    }
    ?name cond;

# conditions - this is a shorthand for <li value=> tags, but the condition uses pname so we
# read a player predicate.
:switchpl |hash,name:|
    []
    ?hash each {
        i `default = if
            ival `li stag
        else
            ival i lival
        then,
    }
    ?name condpl;

# for each item in an sb map or set, do a block of content. Loopvars will be "i" / "ival",
# ival will be undefined for set items.
# Separators should be specified; these are the normal separator and the separator for
# the last item.
:eachsb |v,sep,seplast,map:| ?v [% `map ?map, `sep ?sep, `seplast ?seplast ] `eachsb mktag;

:output ?`output@.;

:done output quit;    


