include "../../aimlgen.ang"

:sentinel |cmd:| none [% `cmd ?cmd ] `sentinel mktag;

[
    # This slightly clumsy construction sets `t to the value of
    # the `name player-predicate (i.e. what this bot thinks this
    # player should be called). It then uses this if it's provided,
    # otherwise "Sir." We set the predicate with "CALL ME"
    [
        [
            "Sir" "unknown" lival,
            `name getpl lidef
        ] `name condpl
    ] `HONOR cat,
    
    # CALL ME which sets the 'name' player predicate (i.e. private between a given player and the bot)
    [star `name setpl think] "CALL ME *" cat,
    ["MY NAME IS *","PLEASE CALL ME *", "REFER TO ME AS *"] each { ["CALL ME", star] sr i cat,}
    ["I * FEMALE", "I * WOMAN", "I * LADY", "I * NOT * MAN"] each { "CALL ME Miss" sr i cat,}
    
    # just a handy thing because I keep forgetting how to use Xaero's minimap :)
    [
        "I and O to set the zoom levels, B to set waypoint, U to list "
        "waypoints and Y to open settings" +,
        [
            [". But I'm surprised you don't know that, ", `HONOR sr, "!"],
            [", ", `HONOR sr,"."],
            " of course."
        ] random
    ] "# MAP" cleancat, # note high priority zero-or-more match
    
            
    
    # the GREET category, for saying hello.
    [
        # store the tod-string in the "t" predicate
        none [%`type `todstring] `mctime mktag `t s think,
        [%
            `morning ["Good morning,", `HONOR sr, "! "],
            `afternoon ["Good afternoon,", `HONOR sr, "! "],
            `evening ["Good evening,", `HONOR sr, "! "],
            `default [
                [
                    ["Good evening,", `HONOR sr, ". Shouldn't you be in bed?"],
                    ["Good evening,", `HONOR sr, "."],
                    ["Hello,", `HONOR sr, ". The darkness weighs heavy."],
                    ["Hello,", `HONOR sr, ". It's a cold night."],
                    ["Hello,", `HONOR sr, ". It's dark out there."]] random]
        ] `t switch
    ] `GREET cleancat,
    
    # RANDSAY just greets players at random
    [ 
        `guarding sentinel `t s think,
        [%
            # turn off randsay if guarding.
            `default [%
                `default "",
                `nothing `greet sr
            ] `t switch,
            `false "" # turns off randsay for this player
        ] `greetenabled switchpl `foo s
    ] `RANDSAY cat,
    
    [
        `false `greetenabled setpl think,
        ["Shutting up, ", "Yes, ", "Of course, "] random,
        `HONOR sr
    ] `SHUTUP cat,
    
    [
        `true `greetenabled setpl think,
        "Yes, ", `HONOR sr
    ] `TALKON cat,
    
    ["SHUT UP","BE QUIET","SILENCE"] each {`SHUTUP sr i cat,}
    
    `TALKON sr "YOU * TALK" cat,
    
    # The REPORT category, for giving a report
    [ 
        `GREET sr clean, " ",
        `timeSinceAttack sentinel `t s think,
        [
            ["There's been trouble recently.",
                "Things have been hot!",
                "Lots of monsters around.",
                "It's been intense."
            ] random 1000 limax,
            [
                "We were under attack recently.",
                "Been a short while since an attack.",
                "There were monsters a little while ago.",
                "Things were hairy a while back."
            ] random 1000 5000 lirng,
            [
                "It's been quiet.", "It's been very quiet.",
                "Things have been quiet.","All's well.","Everything peaceful.",
                "Nice and quiet."] random 5000 limin 
        ] `t cond clean,
        `timeSinceSpawn sentinel `t s think,
        [
            ["I've not been here long.",
                "I'm fairly new here.",
                "Not been around long."] random 25000 limax,
            ["I'm getting the hang of things.",
                "I'm beginning to settle in now.",
                "Getting the feel of things now."] random 25000 100000 lirng,
            ["It's a nice place, this.",
                "Really feel I belong here.",
                "It's a good place.",
                "Nice place you have here."] random 100000 limin
        ] `t cond clean,
        
        `guarding sentinel `t s think,
        [
            "" "nothing" lival,
            "I'm guarding something or other at the moment." "something" lival,
            ["I'm guarding ", `guarding sentinel, "."] lidef
        ] `t cond clean
        
    ]
    `REPORT cleancat,
    
    [
        none [% `cmd `guard ] `sentinel mktag `t s think,
        [%
            `OK ["Yes, ", `HONOR sr, "!"],
            `default "Sorry, I can't do that."
        ] `t switch
    ] "GUARDME" cat,
    
    
    [
        none [% `cmd `guardoff ] `sentinel mktag `t s think,
        [%
            `OK ["Yes, ", `HONOR sr, "!"],
            `default "Sorry, I can't do that."
        ] `t switch
    ] "GUARDOFF" cat,
    
    ["STOP GUARDING", "GO HOME", "RETURN *","* OFF","GO AWAY"]
    each {"GUARDOFF" sr i cat,}
    
    
    ["GUARD ME","DEFEND ME","COME WITH ME","HELP ME"]
    each {"GUARDME" sr i cat,}
        
        
        
    
    
    
    # and reductions for it.
    
    ["HOW *","* REPORT","WHAT * STATUS","HELLO"] 
    each { `REPORT sr i cat,}
    
    # asking the time with TIME
    ["The time is ", none [%`type `digital] `mctime mktag, "."] "TIME" cleancat,
    ["WHAT * TIME","WHAT TIME *"] each {`TIME sr i cat,}
    
    # various things
    [%
        "ARE YOU READY" "I'm always ready,",
        "WHY * YOU HERE" "I'm on guard.",
        "WHY * I HERE?" "That's an interesting question.",
        "TELL ME A JOKE" "I'm not here to joke.",
        "DOING" "I am on guard",
        # here we go to WHATGUARDING if we ask what we're guarding
        "WHAT * GUARDING" "WHATGUARDING" sr,
        "GUARDING *" "WHATGUARDING" sr,
        "WHAT * DOING" "DOING" sr ]
    each {ival i cat,}
    
    # "what doing?" "Guarding" "What?" "everything"
    # Needs to be modified to show a guarded user.
    "Everything." `WHATGUARDING cat "I AM ON GUARD" that,
    "Everything." `WHAT cat "I AM ON GUARD" that,
    "I am guarding everything." `WHATGUARDING cat,
    
    
    
    [ # range debugging thing. Leaving it here as a reference.
        star `t s think,
        [
            "le 10" 10 limax,
            "10-20" 10 20 lirng,
            "20-30" 20 30 lirng,
            "30+" 30 limin ] `t cond
    ] "HT *" cat
]

aiml done
