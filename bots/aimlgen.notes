AIML is a bit verbose, and I had Angort lying around which can make
decent domain-specific languages if you don't mind Reverse Polish.

Some standard idioms:

    [
        "template" "pattern" cat,
        "template" "pattern" cat,
        "template" "pattern" cat
        ...
    ] aiml
    
is what most bot's files would look like. Each line creates a new
category tag inside the aiml tag, with the given pattern and template.

    "FOO" sr `BAR cat
    
is how you would generate

    <category><pattern>BAR</pattern>
    <template><srai>FOO</srai></template></category>

For randomness,
    
    ["foo","bar","baz"] random `FOO cat
    
generates

    <category><pattern>FOO</pattern>
    <template>
    <random>
        <li>foo</li>
        <li>bar</li>
        <li>baz</li></random>
    </template></category>

And 

    ["foo","bar","baz"] random sr clean `FOO cat

would generate

    <category><pattern>FOO</pattern>
    <template>
        <clean opts="s">
            <srai>
                <random>
                    <li>foo</li>
                    <li>bar</li>
                    <li>baz</li>
                </random>
            </srai>
        </clean>
        </template>
    </category>

wrapping the random template inside <srai> and <clean>. The latter
is an extension which removes spurious spaces, and with opts="s" also
does the action of <sentence>.




The words are:

(<list> refers to a list of tags generated by these words or strings)

<list> <pattern> cat
    to create a category tag, where the template can be a list of strings/tags and
    the pattern can be a string or symbol,
    
<tag> <name> s
    to build a set tag <set name=..>..</set>
    
<name> g
    to build a get tag
    
<pattern> sr
    to do an srai
    
<tags> think
    to build a think tag around some tags

<list> random
    to build a random tag from a list of tags

<list> clean
    to build a clean tag (see extension docs)

<cat> <string> that 
    to append a that pattern to a cat (leaves the cat on the stack)
    
<list> <pattern> cleancat
    to do a cat with the template wrapped in a clean, the same as doing
    "clean cat"
    
<li-tags> cond
    to build a condition tag around a list of li tags

<tags> <minval> limin
    to build a minimum condition tag (see extensions)
    
<tags> <maxval> limin
    to build a maximum condition tag (see extensions)
    
<tags> <minval> <maxval> lirng
    to build a range condition tag (see extensions)
    
<hash of string->tags> <varname> switch
    to build a standard condition tag (`default is the key for the default)
    
<contents> <attribute hash> <name> mktag
    to build a tag by hand
    
<contents> <name> stag
    to build a simple tag (no attrs) by hand
    
<cat tag list> aiml
    to build the entire document
    
done
    to print the data and quit.
    


