include "../../aimlgen.ang"

# This is a shop, in Angort -> AIML. The AIML generated is pretty revolting
# and I suppose this Angort is too, but it has the advantage of brevity.


# wraps the entire template in an hours of business check
:hourscheck |template:|
    [
        # is the current time-of-day (or "all") in the "hours" set?
        "all" [% `set `hours ] `insbset mktag `t s think,
        [%
            `default ?template,
            `NO [
                none [%`type `todstring] `mctime mktag
                [% `set `hours ] `insbset mktag `t s think,
                [%
                    `default ?template,
                    `NO `notopen randsbset
                ] `t switch
            ]
        ] `t switch
    ]
;


[
    # general info
    [
        `givestring getdefsb `t s think,
        [%
            `none [
                "I don't sell anything",
                "I sell nothing"
                ] random,
            `default [
                "I sell ", `givestring getdefsb
            ]
        ] `t switch 
    ] "ISELL" cat,
    
    [
        `takestring getdefsb `t s think,
        [%
            `none [
                "I don't buy anything",
                "I'm afraid I don't buy things"
                ] random,
            `default [
                "I buy ", `takestring getdefsb
            ]
        ] `t switch 
    ] "IBUY" cat,
    
    [
        `exchange getdefsb `t s think,
        [%
            `none "",
            `default [
                [
                    "my medium of exchange is ",
                    "as cash I use ",
                    "instead of cash I use ",
                    "I accept payment in "
                ] random, `exchange getdefsb
            ]
        ] `t switch 
    ] "EXCH" cat,
        
    "ISELL" sr "WHAT * SELL" cleancat,
    "IBUY" sr "WHAT * BUY" cleancat,
    
    # joining all those together for wont of anything better to say
    ["ISELL","IBUY","EXCH"] (sr `sentence stag) map "." listintercalate ["."] + "UNKNOWN" cleancat,
    
    # finding out what things cost
    
    [
        # get the cost of star into s
        star `matname stag lower `name stag [%`map `give ] `getsb mktag `t s think,
        [%
            `unknown `dontsell randsbset, #  we don't sell that.
            # we can. Set it to be the current buy item.
            `default [
                `willcost randsbset,
                `t g, " " , `exchange getdefsb, "."
            ]
        ] `t switch
        
    ] "COST *" cleancat,
    
    [ "COST ", star] sr "HOW MUCH IS * " cat,
    [ "COST ", star] sr "HOW MUCH IS A * " cat,
    [ "COST ", star] sr "HOW MUCH IS AN * " cat,
    
    [
        [
            "Price of ", `i g, " is ", `ival g, " ", `exchange getdefsb, "."
        ]
        " " " " `give eachsb
    ] "PRICES" cleancat,
    
    
    [
        `take hassbmap `t s think,
        [%
            `yes [
                "I will give one ", `exchange getdefsb, " for: ",
                [
                    `ival g, " ", `i g
                ] ", " " or " `take eachsb
            ],
            `default ""
        ] `t switch
    ] "VALUES" cleancat,
            
    
    "PRICES" sr "COST" cat,
    
    # This is the "*" category.
    # did you just say the name of a thing that we sell or buy? Say that.
    
    [
        star `matname stag lower `t s think,
        [%
            `unknown "UNKNOWN" sr,# it wasn't the name of a thing
            `default [
                `t g `name stag [%`map `give ] `getsb mktag `p s think,
                [%
                    `unknown [
                        `t g `name stag [%`map `take ] `getsb mktag `p s think,
                        [%
                            `unknown `randomitem randsbset,
                            `default ["I buy those for ", `p g, `exchange getdefsb, "."]
                        ] `p switch
                    ],
                    `default ["I sell those for ", `p g, `exchange getdefsb, "."]
                ] `p switch
            ]
        ] `t switch, "HOWBUY" sr, "To sell something just give it to me.", "PRICES" sr, "VALUES" sr
    ] "*" cleancat,
    
    [
        "If you want to buy something, say so. For example, \"buy ",
        # we look up a random key from the GIVE map, the things we give.
        none [%`map `give ] `randsbmapkey mktag, "\". Then give me some ", `exchange getdefsb, "."
    ] "HOWBUY" cat,
    
    "HOWBUY" sr "HOW * BUY" cat,
    
    # dealing with rightclick
    [
        `itemheld getpl `t s think,
        [
            # first see if it isn't air
            `noitem randsbset     `AIR lival,
            # then if it's our exchange item AND we have a item we'd like to buy from the shop
            [
                `exchange getdefsb upper `value stag,
                [%
                    # we do have a buy item
                    `default [
                        [
                            # if it is our exchange item, try to take it - checking the cost
                            `exchange getdefsb upper `item stag,
                            # look up the cost of the current buy item
                            [`curbuyitem getpl lower `name stag] [%`map `give ] `getsb mktag `count stag
                        ] `take stag `t s think,
                        # and show the result, giving us the thing we wanted too.
                        [%
                            `notenough `notenough randsbset,
                            `wrong `wrong randsbset,
                            `default "WTF? Something weird has happened",
                            `yes [
                                [
                                    `curbuyitem getpl upper `item stag,
                                    1 `count stag
                                ] `give stag think,
                                `thanks randsbset
                            ]
                        ] `t switch
                    ],
                    `unknown [
                        "But what would you like to buy?",
                        `setbuy settopic think
                    ]
                ] `curbuyitem switchpl
                
            ] `li stag,
            # now if it's anything the shop can buy
            [
                # put the exchange rate for t (our item) or "unknown" in q
                [`t g lower `name stag] [% `map `take] `getsb mktag `q s think,
                [%
                    `unknown ["I can't buy that. I only buy ",
                        `takestring getdefsb,
                        ". My exchange item is ", `exchange getdefsb lower,
                        " by the way."],
                    `default [
                        # it appears I can buy these - try to take that number and store the result in s
                        [`t g lower `item stag, `q g `count stag] `take stag `t s think,
                        [%
                            `notenough `notenough randsbset,
                            `wrong `wrong randsbset,
                            `default "WTF? Something weird has happened",
                            `yes [
                                [
                                    `exchange getdefsb upper `item stag,
                                    1 `count stag
                                ] `give stag think,
                                `thanks randsbset
                            ]
                        ] `t switch
                    ]
                ] `q switch
            ] lidef
        ] `t cond
    ] hourscheck `RIGHTCLICK cleancat,
    
    [
        # get the item, having processed the material name, into "thing".
        star `matname stag `lowercase stag `thing s think,
        # look it up in the "give" map to see if we can give these to the player,
        # getting the cost into t.
        [`thing g `name stag] [%`map `give] `getsb mktag `t s think,
        [%
            `unknown `dontsell randsbset, # can't.
            # we can. Set it to be the current buy item.
            `default [
                `thing g `curbuyitem setpl think,
                "OK, you're buying ", `thing g,
                " and the cost is ", `t g, " " , `exchange getdefsb,
                ". When you've got enough, just say \"Forget it\" or \"Buy something else.\""
            ]
        ] `t switch
    ]  hourscheck "BUY *" cat,
    
    ["BUY", 2 starn] sr "* BUY *" cat,
    
    # for the "what would you like to buy"... "x".. convo
    [
        [
            "*" settopic think,
            ["BUY",star] sr
        ] "*" cat 
    ] `setbuy topic,
    
    
    # forgetting
    
    [`unknown `curbuyitem setpl think,
        `agreement randsbset
    ] "FORGET *" cat,
    
    "FORGET" sr "BUY * ELSE" cat
] aiml done
